// tiempo
`timescale 1ns/100ps

// testbench del módulo de password
module password_tb();

// auxiliares
reg clk; // reloj
reg rst; // reset 
reg [9:0] SW; // switches
wire done; // done
wire error; // error
wire [6:0] HEX0, HEX1, HEX2, HEX3; // displays

// instanciamos el módulo password
password PASSWORD (
  .clk(clk),
  .rst(rst),
  .SW(SW),
  .done(done),
  .error(error),
  .HEX0(HEX0),
  .HEX1(HEX1),
  .HEX2(HEX2),
  .HEX3(HEX3)
);

// generación del reloj
    initial begin
        clk = 0;
        forever #5 clk = ~clk; // Toggle clock every 5 time units
    end

// pruebas
initial 
	begin
		// inicializamos
		//clk = 0;
		rst = 0;
		SW == 0; // inicializamos los switch

		// secuencia de reset
		#10 rst = 1;
		#10 rst = 0;
      #10;

		// caso 1: secuencia correcta de contraseña
		//$display("Caso 1: Secuencia Correcta de Contraseña");

		// primer dígito: SW[2] = 1 (2)
		#10 SW[2] = 1; // 2
		#10 SW = 0; // 0

		// segundo dígito: SW[0] = 1 (0)
		#10 SW[0] = 1; // 0
		#10 SW = 0; // 0

		// tercer dígito: SW[1] = 1 (1)
		#10 SW[1] = 1; // 1
		#10 SW = 0; // 0

		// cuarto dígito: SW[6] = 1 (6)
		#10 SW[6] = 1; // 6
		#10 SW = 0; // 0

		// caso 2: secuencia incorrecta
		//$display("Caso 2: Secuencia Incorrecta");

		// reiniciar
		#10 rst = 0;
		#10 rst = 1;
		#10;

		// primer dígito incorrecto
		#10 SW[4] = 1; // 4
		#10 SW = 0; // 0

		// caso 3: secuencia parcialmente correcta
		//$display("Caso 3: Secuencia Parcialmente Correcta");

		// reiniciar
		#10 rst = 0;
		#10 rst = 1;
		#10;

		// primer dígito correcto
		#10 SW[2] = 1; // 2
		#10 SW = 0; // 0

		// segundo dígito incorrecto
		#10 SW[1] = 1; // 1
		#10 SW = 0; // 0

		// finalizar simulación
		//#50 $finish;
	end
endmodule