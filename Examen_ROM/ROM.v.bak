// módulo de memoria tipo ROM (Read Only Memory)
module ROM #(parameter DATA_WIDTH = 8, ADDRESS_WIDTH = 4)
(
	input ce, // clk enable 
	input read_en, // read enable
	input [ADDRESS_WIDTH - 1:0] address, // dirección 8 bits para acceder a los 256
	output [DATA_WIDTH - 1:0] data // salida de datos 8 bits 
);


// memoria ROM
reg [DATA_WIDTH - 1:0] ROM_MEMORY [0:2**(ADDRESS_WIDTH) -1]; // inicia en el address 0 y va al 255, es de 8 bits

initial
	begin
		$readmemh("ROM_hex.hex", ROM_MEMORY); // sirve para que lea un archivo y lo asocie a la memoria
		// $readmemh -> hexadecimal
		// $readmemb -> binario
	end
	
assign data = (ce && read_en)? ROM_MEMORY[address]: 0;
// asignamos a data que cuando el clk enable y el read enable estén en 1 se vaya al address que damos, sino no hace nada
// address del registro en la memoria 
	
endmodule


module ROM #(
    parameter DATA_WIDTH = 8,      // Ancho de los datos
    parameter ADDRESS_WIDTH = 4    // Ancho de la dirección
)(
    input wire ce,                 // Chip enable
    input wire read_en,            // Read enable
    input wire [ADDRESS_WIDTH-1:0] address, // Dirección de lectura
    output wire [DATA_WIDTH-1:0] data      // Dato leído
);

    // Memoria ROM
    reg [DATA_WIDTH-1:0] ROM_MEMORY [0:(1 << ADDRESS_WIDTH) - 1];

    // Inicialización de la ROM desde un archivo hexadecimal
    initial begin
        $readmemh("ROM_hex.hex", ROM_MEMORY);
    end

    // Lectura de la ROM
    assign data = (ce && read_en) ? ROM_MEMORY[address] : 0;

endmodule